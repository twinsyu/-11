//10727140 黃于軒 10727154 黃于珊
# include<iostream> 
# include<cstdio>
# include<cstring>
# include<stdlib.h>
# include<new>
# include<iomanip>
# include<time.h>
# include<fstream>

using namespace std;

class Queue {
	struct QueueNode {
		int oid;
		int arrival;
		int duration;
		int timeOut;	
		QueueNode *next;
	};

typedef QueueNode *QueuePtr ;
QueueNode *backPtr;
int total; // 總數 
public:
	Queue() {
		backPtr = NULL;
		total = 0;
	} // Queue()
	bool IsEmpty() {
		if ( backPtr == NULL )
			return true;
		return false;
	} // IsEmpty()

	void Enqueue( int oid, int arrival, int duration, int timeOut ) {
		QueueNode *newPtr = new QueueNode();
		newPtr->oid = oid;
		newPtr->arrival = arrival;
		newPtr->duration = duration;
		newPtr->timeOut = timeOut;

		if ( ! IsEmpty() ) {
			newPtr->next = backPtr->next;
			backPtr->next = newPtr;
    	} // if
		else 
			newPtr->next = newPtr;

		backPtr = newPtr;
		total++;
	} // Enqueue()
	bool Load( string & filenumber ) {
		cout << "Input a file number (e.g., 401, 402, 403, ...):";
		cin >> filenumber;

		FILE	*infile = NULL;

		string filename = "input" + filenumber + ".txt";
		infile = fopen( filename.c_str(),"r" );

		if ( infile == NULL ) // 無檔案 
			cout << endl << filename << "does not exist!" << endl;
		else {
			int oid, arrival, duration, timeOut;
			for ( char ch = '\0'; ch != '\n' ;fscanf( infile, "%c", &ch ) );

			while ( fscanf( infile, "%d", &oid ) != EOF ) {
				fscanf( infile, "%d %d %d", &arrival, &duration, &timeOut );
				Enqueue( oid, arrival, duration, timeOut );
			} // while	

			fclose( infile );

			return true;
		} // else 有檔案 

		return false;
	} // Load()

	QueuePtr Move( int n ) {
		QueueNode *temp = backPtr->next;
		for ( int i = 0; i < n ; temp = temp->next, i++ );		
		return temp;
	} // Move()

	void Swap( int a, int b ) {
		QueueNode *aa = Move(a);
		QueueNode *bb = Move(b);
		QueueNode *temp = new QueueNode();

		temp->oid = bb->oid;
		temp->arrival = bb->arrival;
		temp->duration = bb->duration;
		temp->timeOut = bb->timeOut;

		bb->oid = aa->oid;
		bb->arrival = aa->arrival;
		bb->duration = aa->duration;
		bb->timeOut = aa->timeOut;

		aa->oid = temp->oid;
		aa->arrival = temp->arrival;
		aa->duration = temp->duration;
		aa->timeOut = temp->timeOut;

	} // Fill()


	void ShellSort () {
		for ( int h = total / 2; h > 0 ; h = h / 2 ) {

			//cout << endl << endl << " h = " << h << endl;

			for ( int unsorted = h; unsorted < total; ++unsorted ) {
				int loc = unsorted;
				QueueNode *nextData = Move( unsorted );
				QueueNode *walk = Move( loc-h );

				while ( loc >= h && ( walk->arrival > nextData->arrival ) ) {
					if ( walk->arrival > nextData->arrival ){
						Swap( loc, loc - h );
						loc = loc - h; 
						walk = Move( loc );
				    } // if
				} // while
			} // for
            Check();
            Check();
            //Check();
		} // for
	} // ShellSort()

	void Check() {
		QueueNode* temp = backPtr->next;
		int num = 0 ;
		do {
			num ++;
			if ( temp->arrival == temp->next->arrival ) {
				if( temp->oid > temp->next->oid ) {
					Swap( num, num -1 );
					num++ ; 
					temp = Move( num );	
				}
			}
			temp = temp->next;
		} while ( temp != backPtr->next );

	} // Check()
	
	void Print() {
		cout << endl ;
		cout << endl << "OID" << setw(10) << "Arrival"  << setw(10) << "Duration" << setw(10) << "TimeOut";
		QueueNode *temp = backPtr->next;
		do {
			cout << endl<< temp->oid;
			cout << setw(10) << temp->arrival;
			cout << setw(10) << temp->duration;
			cout << setw(10) << temp->timeOut;

			temp = temp->next;
		} while ( temp != backPtr->next );
	} // Print()

	void Write( string filenumber ) {
		string newFile = "sorted" + filenumber + ".txt";
		ofstream outfile( newFile.c_str() );
		outfile << "OID" << setw(10) << "Arrival"  << setw(10) << "Duration" << setw(10) << "TimeOut";
		QueueNode *temp = backPtr->next;
		do {
			outfile << endl << temp->oid;
			outfile << setw(10) << temp->arrival;
			outfile << setw(10) << temp->duration;
			outfile << setw(10) << temp->timeOut;

			temp = temp->next;
		} while ( temp != backPtr->next ); 
	} // Write()

};


int main() {
	int command;
	string filenumber;
	bool haveFile;
	do {
		cout << endl << "**** Simulate FIFO Queues by SQF *****";
		cout << endl << "* 0. Quit                            *";
		cout << endl << "* 1. Sort a file                     *";
		cout << endl << "* 2. Simulate one FIFO queue         *";
		cout << endl << "**************************************";
		cout << endl<< "Input a command(0, 1, 2): ";
		cin >> command;
		if ( command == 0 )
			break;
		else if ( command == 1 ) {
			double readT, sortT, writeT;
			double START,END;
			Queue queue; 
			START = clock();
			haveFile = queue.Load( filenumber );
			END = clock();
			if ( haveFile ) {
				queue.Print();

				readT = (double)clock()/CLOCKS_PER_SEC;
			//	START = 0.00;
			//	START = clock();
			//	cout << "c" << START;
				queue.ShellSort();
				queue.ShellSort();
				queue.ShellSort();
				queue.ShellSort();
				queue.Print();
			//	END = clock();
				cout << endl << "Reading data: " << readT << " s).";
				queue.Write( filenumber );
			} // if
		} // else if ( command == 1 )
		else if ( command == 2 ) {

		} // else if ( command == 2 )

	} while ( command != 0 );
} // main()
	
