// 10727140 黃于軒 10727154 黃于珊
# include<iostream>
# include<cstdio>
# include<cstring>
# include<stdlib.h>
# include<new>
# include<time.h>
# include<fstream>
# include<vector> 
# include<stdio.h>

using namespace std;

class List {
	struct Data {
		string totalData; // 一行內的所有資訊
		int gNum; // 上學年度畢業學生數
	};
	vector<Data> collegeSet;
	
public:
	
	bool Load( string fileNum ) { // 讀檔 
		FILE *infile = NULL;
		
		string filename = "input" + fileNum + ".txt";
		infile = fopen( filename.c_str(), "r" );
		
		if ( infile == NULL )  // 無檔案 
			cout << endl << filename << " does not exist!" << endl;
		else { // 有檔案
//			collegeSet.clear(); // 清空vector 
			char temp[40];
			
			//讀掉前三行 
			for ( char ch = '\0'; ch != '\n' ; ch = getc(infile) );
			for ( char ch = '\0'; ch != '\n' ; ch = getc(infile) );
			for ( char ch = '\0'; ch != '\n' ; ch = getc(infile) );
			
			while ( fscanf( infile, "%s", temp ) != EOF ) {
				Data tempD;
				tempD.totalData = "";
				tempD.totalData = tempD.totalData+ temp + '\t';
				for ( int i = 1; i < 15; i++ ) {
					fscanf( infile, "%s", temp );
					tempD.totalData = tempD.totalData + temp;
					
					if ( i == 4 || i == 6 || i == 11 || i == 13 ) // 日間 /進修別, 等級別, 縣市名稱
						tempD.totalData = tempD.totalData + ' ' ;
					else if ( i != 14 ) // 除了一行中最後一項數據
						tempD.totalData = tempD.totalData + '\t';
					
					if ( i == 10 ) { // 上學年度畢業生數 
						tempD.gNum = atoi( temp );
					} // if
				} // for
				
				collegeSet.push_back( tempD );
			} // while
		
			fclose( infile );
			return true;
		} // else 有檔案 
		
		return false;
	} // Load()
	
	void Write( string fileNum, string sortType ) {
		string newFile = sortType + "_sort" + fileNum + ".txt";
		ofstream outfile( newFile.c_str() );
		
		int size = collegeSet.size();
		for ( int i = 0; i < size; i++ )
			outfile << collegeSet[i].totalData << endl;
	} // Write()
	
	void Clear() {
		collegeSet.clear();
	} // Clear()
	 
	void Swap( int a, int b) { // 交換
		string tempS = "";
		int tempN;
		
		tempS = collegeSet[a].totalData;
		tempN = collegeSet[a].gNum;
		
		collegeSet[a].totalData = collegeSet[b].totalData;
		collegeSet[a].gNum = collegeSet[b].gNum;
		
		collegeSet[b].totalData = tempS;
		collegeSet[b].gNum = tempN;
	} // Swap
	 
///*
	void Print() {
		int size = collegeSet.size();
		for ( int i = 0; i < size; i++ ) {
			cout << endl << i << ": " << collegeSet[i].gNum;
		} // for
	} // Print() 
//*/	


	double Ssort() { //選擇排序 
		double START, END;
		START = clock();
		int size = collegeSet.size();
		int max = -1; // 最大數的 
		int indexOfMax;
		
		for ( int i = 0; i < size - 1; i++ ) {
			int max = -1; // 最大數
			for ( int j = i; j < size; j++ ) {
				if ( collegeSet[j].gNum > max ) {
					max = collegeSet[j].gNum;
					indexOfMax = j;
				} // if	
			} // for
			
			if ( indexOfMax != i )
				Swap( i, indexOfMax );
		} // for
		END = clock();
		return END - START;
	} // Ssort()
	
	double Bsort () { //氣泡排序 
		double START, END;
		START = clock();
		bool sorted = false;
		int size = collegeSet.size();
		for ( int i=0; i<size && !sorted ; i++ ){
			sorted = true;
			for(int j=1;j<size-i;j++){
				if( collegeSet[j].gNum > collegeSet[j-1].gNum ){
					Swap(j,j-1);
					sorted = false;
				}//if
			}//for
		}//for
		
		END = clock();
		return END - START;
	} // Bsort()
	
	void Merge( int first, int mid, int last ) {
		cout << first << "  " << mid << " " << last;
		vector<Data> tempVec;
		int first1 = first, last1 = mid;
		int first2 = mid + 1, last2 = last;
		while ( ( first1 <= last1 ) && ( first2 <= last2 ) ) {
			Data temp;
			if ( collegeSet[first1].gNum >= collegeSet[first2].gNum ) {
				cout << endl << collegeSet[first1].gNum << ">=" << collegeSet[first2].gNum; 
				temp = collegeSet[first1];
				first1++;
			} // if
			else {
				cout << endl << collegeSet[first1].gNum << "<" << collegeSet[first2].gNum; 
				temp = collegeSet[first2];
				first2 ++;
			} // else 
			
			tempVec.push_back( temp );
		} // for
		
		cout << "          first1:  " << first1 << " first2: " << first2<<endl;	
		while (first1 <= last1) {
			Data temp;
			temp= collegeSet[first1];
			tempVec.push_back(temp);
			first1++;
		} // for
		while ( first2 <= last2 ) {
			Data temp;
			temp = collegeSet[first2];
			tempVec.push_back(temp);
			first2++;
		} // for
		
		int index = first;
		int i = 0;
		while ( index <= last ) {
			collegeSet[index].totalData = tempVec[i].totalData ;
			index++;
			i++;
		} // for
		
		for( i = first; i <= last; ++i )
			cout << endl << collegeSet[i].totalData ;
		tempVec.clear();
		cout << endl;
	} // merge()
	
	double Msort ( int first, int last ) { //合併排序 
		double START, END;
		START = clock();
		if ( first < last ) {
			int mid = ( first + last ) / 2;
			Msort( first, mid );
			Msort( mid + 1, last );
			Merge( first, mid, last );
		} // if

		END = clock();
		return END - START;
	} // Msort()
	

 void Partition ( int first, int last, int & p ) {
	int lastS1 = first;
	int firstUn = first + 1 ;
	p = first;
	while ( firstUn <= last ) {
		if( collegeSet[firstUn].gNum > collegeSet[p].gNum ) {
    		lastS1++;
    		Swap( lastS1, firstUn );
		} // if
    
		firstUn++; 
	} // while
	
	Swap( first ,lastS1 );
	p = lastS1 ; 
 } // Partition()
 
	double Qsort( int first, int last ) {
		double	START, END;
		START = clock();
		int pivotIndex;
		if ( first < last ) {
			Partition( first, last, pivotIndex );
			Qsort( first, pivotIndex - 1 );
			Qsort( pivotIndex + 1, last );
		} // if
	
		END = clock();
		return END - START;
	} // Qsort()
	
	int GetSize() {
		return collegeSet.size();
	} // GetSize()
};


int main() {
	int command;
	List list;
	string fileNum;
	bool haveFile;
	do {
		cout << endl << "******** Sorting Algorithms *********" ;
		cout << endl << "* 0. QUIT                           *" ;
		cout << endl << "* 1. Selection sort vs. Bubble sort *" ;
		cout << endl << "* 2. Merge sort vs. Quick sort      *" ;
		cout << endl << "*************************************" ;
		cout << endl << "Input a command(0, 1, 2): ";
		cin >> command;
		if ( command == 0 )
			break;
		else if ( command == 1 ) {
			cout << endl << "Input a file number: ";
			cin >> fileNum; // 檔案編號 
		
			double selectT, bubbleT;
			list.Load( fileNum );
			selectT = list.Ssort(); // 選擇排序 
			list.Write( fileNum, "My_select" );
			list.Clear();
			
			list.Load( fileNum );
			bubbleT = list.Bsort(); // 氣泡排序
			list.Write( fileNum, "My_bubble" );
			list.Clear(); 
			cout << endl << "Select sort time : " << selectT << " ms." ;
			cout << endl << "Bubble sort time : " << bubbleT << " ms." ;
		} // else if 
		else if ( command == 2 ) {
			cout << endl << "Input a file number: ";
			cin >> fileNum; // 檔案編號 
			double mergeT, quickT;
			
			list.Load( fileNum );
			quickT = list.Qsort( 0, list.GetSize()-1 );
			list.Write( fileNum, "MY_quick" );
			list.Clear();
			
		//	list.Load( fileNum );
		//	mergeT = list.Msort( 0, list.GetSize()-1 );
		//	list.Write( fileNum, "My_merge" );
		//	list.Clear();
			cout << endl << "Merge sort time : " << mergeT << " ms." ;
			cout << endl << "QUick sort time : " << quickT << " ms." ;
			
		} // else if 
		else
			cout << "command does not exist!";
	} while( command != 0 );
}  // main()
